{"pageProps":{"locale":"de","markdown":"\n# Klasse\n\nUnter einer Klasse (auch Objekttyp genannt) versteht man in der objektorientierten Programmierung ein abstraktes Modell bzw. einen Bauplan f√ºr eine Reihe von √§hnlichen Objekten.\n\nDie Klasse dient als Bauplan f√ºr die Abbildung von realen Objekten in Softwareobjekte und beschreibt :t[Attribute]{#attribut} (Eigenschaften) und :t[Methoden]{#methode} (Verhaltensweisen) der Objekte. Verallgemeinernd k√∂nnte man auch sagen, dass eine Klasse dem Datentyp eines Objekts entspricht. \n\nQuelle: https://de.wikipedia.org/wiki/Klasse_(Objektorientierung)","data":{"name":"Klasse"},"references":[{"folder":"book","path":{"directory":"erste-implementierung","absolute":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook/book/erste-implementierung/weitere-klassen.md","relative":"erste-implementierung/weitere-klassen.md","href":"/erste-implementierung/weitere-klassen"},"extension":".md","name":"weitere-klassen","root":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook","markdown":{"content":"\n# Weitere Klassen\n\nUnser Spiel besteht im Moment aus zwei Klassen. Im Laufe dieser Seite wollen wir weitere Klassen implementieren und die folgende Ausgabe erreichen.\n\n![](/assets/weitere-klassen/ausgabe.png)\n\n## Aufgaben\n\n### Klassen implementieren\n\nSetze das folgende :t[UML-Klassendiagramm]{#klassendiagramm} im BlueJ-Projekt um. Die Klassen **Sprite** und **Stage** stammen aus der **Scratch for Java** Bibliothek. Die Klassen **Sprite** und **Stage** haben eine Vielzahl von Methoden, die den Bl√∂cken in Scratch √§hneln. Wir werden diese nach und nach kennenlernen. Im Klassendiagramm werden nur im Moment relevante dargestellt, damit es √ºbersichtlich bleibt.\n\n```mermaid\nclassDiagram\n    Stage <|-- BunnyHop\n    Sprite <|-- Spieler\n    Sprite <|-- Feind\n    Sprite <|-- Plattform\n    Feind <|-- StachelFeind\n\n    class Stage {\n        Stage(width: int, height: int)\n        add(sprite: Sprite)\n        remove(sprite: Sprite)\n        setColor(r: int, g: int, b: int)\n        addBackdrop(name: String, filePath: String)\n        switchBackdrop(name: String)\n        nextBackdrop()\n    }\n\n    class BunnyHop {\n        Spieler bugs\n        StachelFeind ingo\n        Plattform p1\n        Plattform p2\n        Plattform p3\n        Plattform p4\n    }\n\n    class Sprite {\n        getX(): float\n        getY(): float\n        setX(x: float)\n        setY(y: float)\n        setPosition(x: float, y: float)\n        changeX(x: float)\n        changeY(y: float)\n        setSize(percentage: float)\n        move(steps: float)\n        setDirection(direction: float)\n        turnLeft(amount: float)\n        turnRight(amount: float)\n        addCostume(name: String, filePath: String)\n        switchCostume(name: String)\n        nextCostume()\n    }\n\n    class Spieler {\n    }\n\n    class Plattform {\n        istKaputt: boolean\n    }\n\n    class Feind {\n    }\n\n    class StachelFeind {\n    }\n```\n\n:::alert{info}\nWenn du dir nicht sicher bist wie man das Klassendiagramm in Java umsetzen kann, dann orientiere dich an der Klasse Spieler oder schaue hier: :t[Vererbung in Java]{#vererbung-java}\n:::\n\n### Ausgabe nachstellen\n\nDa wir nun alle notwendigen Klassen zur Verf√ºgung haben, k√∂nnen wir jetzt die Klasse **BunnyHop** so ver√§ndern, dass sie der obigen Ausgabe entspricht.\n\nModifiziere die Klasse **BunnyHop** so, dass sie der obigen Ausgabe entspricht.\n\nSetze dazu die Gr√∂√üe der Stage BunnyHop auf 800x400 (`super(800, 400)`) und nutze die folgenden Objektdiagramme:\n\n::excalidraw{src=\"/assets/weitere-klassen/object-diagram.excalidraw\" aspectRatio=\"4/3\" autoZoom=true center=true}\n\n\n\n:::collapsible{title=\"Tipp: Position\" id=\"tipp-1\"}\nMit den Methoden [**setX**](https://scratch4j.openpatch.org/reference/sprite/motion/setX), [**setY**](https://scratch4j.openpatch.org/reference/sprite/motion/setY), [**setPosition**](https://scratch4j.openpatch.org/reference/sprite/motion/setPosition) kannst du die Position von Objekten der Klasse Sprite ver√§ndern.\n:::\n\n:::collapsible{title=\"Tipp: Koordinaten\" id=\"tipp-2\"}\nFalls du Hilfe bzgl. der Koordinaten brauchst, kannst du im Konstruktor der **BunnyHop**-Klasse die Methode `this.setDebug(true)` aufrufen.\n:::\n\n### L√∂sung\n\n::archive[Projekt Weitere Klassen.zip]{name=\"bugs-weitere-klassen\"}\n","data":{"name":"Weitere Klassen","lang":"de","index":1}}},{"folder":"book","path":{"directory":"erste-modellierung","absolute":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook/book/erste-modellierung/erste-modellierung-von-klassen.md","relative":"erste-modellierung/erste-modellierung-von-klassen.md","href":"/erste-modellierung/erste-modellierung-von-klassen"},"extension":".md","name":"erste-modellierung-von-klassen","root":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook","markdown":{"content":"\n# Erste Modellierung Klassen\n\nUm die [Spielidee](/die-spielidee) umsetzen zu k√∂nnen, m√ºssen zuerst alle :t[Objekte]{#objekt} und deren :t[Attribute]{#attribut} (Eigenschaften) und :t[Methoden]{#methode} (F√§higkeiten) identifiziert und entsprechende :t[Klassen]{#klasse} in einem :t[UML-Klassendiagramm]{#klassendiagramm} modelliert werden.\n\nDas Team hat schon begonnen :t[Klassen]{#klasse} zu modellieren.\n\n```mermaid\nclassDiagram\n\n    class Spiel {\n\n    }\n\n    class Spieler{\n      String bildGehen1\n      String bildGehen2\n      int x\n      int y\n      ...\n    }\n    class StachelFeind{\n\n    }\n    class FluegelFeind {\n\n    }\n    class ProppelerFeind {\n\n    }\n    class SteinFeind {\n\n    }\n    class Plattform{\n\n    }\n```\n\n## üñä Aufgaben\n\n1. Vervollst√§ndigt das :t[Klassendiagramm]{#klassendiagramm}. Nutzt dazu die Vorlage im [Mermaid-Editor](https://mermaid.live/edit#pako:eNp9kU1vgzAMhv9K5DNCo51Ym_PUXidxq3LxiAvR8oFCkEoR_32BtqiaWH167fdx7CQDlE4ScCg1tu2nwsqjEVZYFmOusaJRpNlwK01xU-MKRX7BiuCVrdi30vJINdnsP2PzMJQN7PKc9OyRpWm6DH0aGbCsSR9IWbnMXeEOuqPqzk33WEG-vGuaaf9XUBGi-fIUjSGcnTd_t4EEDHmDSsaXnk0BoSZDAniUEv2PAGEnDrvgit6WwIPvKIGukRjo_jHAz6jbWG3QAh_gAjzPE-iBZ-95ut-95Ztsu_3Y7aMYE7g6F1uyGT_Nem4ffwEYd5ly).\n2. Identifiziert Gemeinsamkeiten der Klassen. Schreibt die Gemeinsamkeiten auf.\n3. üöÄ: Lest den Glossareintrag zur :t[Vererbung]{#vererbung} und √ºberlegt euch inwiefern das Konzept der :t[Vererbung]{#vererbung} hier angewendet werden kann.\n","data":{"name":"üñä Erste Modellierung von Klassen","index":2,"lang":"de"}}},{"folder":"book","path":{"directory":"euer-spiel/epics","absolute":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook/book/euer-spiel/epics/pause.md","relative":"euer-spiel/epics/pause.md","href":"/euer-spiel/epics/pause"},"extension":".md","name":"pause","root":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook","markdown":{"content":"\n# Epic Pause\n\nDas Spiel soll beim Dr√ºcken einer Taste pausiert werden. Beim erneuten Dr√ºcken der Taste soll das Spiel wieder aufgenommen werden.\n\n:::collapsible{title=\"Hilfe: Attribut Pause\" id=\"461068\"}\n\nDamit wir das Spiel global pausieren k√∂nnen, brauchen wir ein :t[Attribut]{#attribut} in der Level-Klasse und eine :t[Methode]{#methode} `istPausiert`.\n\nAu√üerdem m√ºssen wir das :t[Attribut]{#attribut} ver√§ndern, wenn die P-Taste gedr√ºckt wird.\n\n```java\npublic class Level extends Stage {\n    // ...\n    private boolean pause;\n\n    // ...\n    public boolean istPausiert() {\n        return pause;\n    }\n    // ...\n    public void whenKeyPressed(int pKeyCode) {\n        if(pKeyCode == KeyCode.VK_P) {\n            // pause umkehren;\n            this.pause = !this.pause;\n        }\n    }\n    // ...\n```\n\n:::\n\n:::collapsible{title=\"Hilfe: Pause in anderen Klassen nutzen\" id=\"392533\"}\n\nIn den anderen :t[Klassen]{#klasse} wie Spieler und Plattform, m√ºssen wir das Level bekannt machen und in der run-Methode abfragen, ob das Spiel pausiert ist. Wenn dies der Fall ist, dann beenden wir den Methodenaufruf an dieser Stelle.\n\n```java\npublic void run() {\n    if (level.istPausiert()) {\n        return;\n    }\n}\n```\n\n:::\n\n:::collapsible{title=\"Hilfe: Beispiel Implementierung\" id=\"967325\"}\n\n::archive[Beispiel Implementierung]{name=\"epic-pause\"}\n\n:::","data":{"name":"ü•à Pause"}}},{"folder":"book","path":{"directory":"euer-spiel/epics","absolute":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook/book/euer-spiel/epics/schneller-mit-der-zeit.md","relative":"euer-spiel/epics/schneller-mit-der-zeit.md","href":"/euer-spiel/epics/schneller-mit-der-zeit"},"extension":".md","name":"schneller-mit-der-zeit","root":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook","markdown":{"content":"\n# Epic: Schneller mit der Zeit\n\nDas Spiel soll alle paar Sekunden schneller werden.\n\n:::collapsible{title=\"Hilfe: Globale Geschwindigkeit\" id=\"570315\"}\n\nZun√§chst wollen wir ein :t[Attribut]{#attribut} \"geschwindigkeit\" in der Level haben, welches die Geschwindigkeit des Spiels repr√§sentiert. Dieses :t[Attribut]{#attribut} ver√§ndern wir alle 5000 Millisekunden (5 Sekunden).\n\n```java\npublic class Level extends Stage {\n    private float geschwindigkeit = 1;\n\n    // ...\n\n    public void run() {\n        if (this.getTimer().everyMillis(5000)) {\n            geschwindigkeit += 0.5;\n        }\n    }\n}\n```\n\n:::\n\n:::collapsible{title=\"Hilfe: Geschwindigkeit nutzen\" id=\"330385\"}\n\nDamit wir die Geschwindigkeit in anderen :t[Klassen]{#klasse} nutzen k√∂nnen, m√ºssen zun√§chst einen :t[Methode]{#methode} in der Klasse Level hinzuf√ºgen.\n\n```java\npublic float getGeschwindigkeit() {\n    return geschwindigkeit;\n}\n```\n\nJetzt k√∂nnen wir die :t[Methode]{#methode} in anderen :t[Klassen]{#klasse} nutzen.\n\n:::\n\n:::collapsible{title=\"Hilfe: Beispiel Implementierung\" id=\"967234\"}\n\n::archive[BlueJ Projekt: Schneller mit der Zeit]{name=\"epic-schneller-mit-der-zeit\"}\n\n:::","data":{"name":"ü•â Schneller mit der Zeit"}}},{"folder":"book","path":{"directory":"euer-spiel/epics","absolute":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook/book/euer-spiel/epics/tag-nacht.md","relative":"euer-spiel/epics/tag-nacht.md","href":"/euer-spiel/epics/tag-nacht"},"extension":".md","name":"tag-nacht","root":"/home/runner/work/hyperbook-spieleentwicklung/hyperbook-spieleentwicklung/.hyperbook","markdown":{"content":"\n# Epic: Tag und Nacht\n\n:::collapsible{title=\"Hilfe: Globale Eigenschaft\" id=\"536496\"}\n\nOb Tag ist, kannst du dir am besten als :t[Attribut]{#attribut} in deiner Level-Klasse speichern. Definiere einen :t[Getter]{#vererbung-java} und schon k√∂nnen alle Objekte, die die :t[Klasse]{#klasse} kennen darauf zugreifen.\n\n```java\nprivate boolean tag = false;\n\npublic boolean istTag() {\n    return tag;\n}\n```\n\n:::\n\n:::collapsible{title=\"Hilfe: Tag abh√§ngig von der Zeit\" id=\"303419\"}\n\nMit einem Timer k√∂nnen f√ºr alle paar Sekunden unterschiedliche Anweisungen ausf√ºhren.\n\n```java\nif (this.getTimer().interalMillis(6000, 4000)) {\n    // 6 Sekunden ist Tag\n} else {\n    // 4 Sekunden ist Nacht\n}\n```\n\n:::\n\n:::collapsible{title=\"Hilfe: Beispiel Implementierung\" id=\"9672143\"}\n\n::archive[Beispiel Implementierung]{name=\"epic-tag-und-nacht\"}\n\n:::","data":{"name":"ü•â Tag und Nacht"}}}],"navigation":{"next":{"name":"Einf√ºhrung","index":0,"href":"/"},"current":null,"previous":null,"sections":[{"name":"Erste Modellierungen","index":1,"isEmpty":true,"pages":[{"name":"üñä Erste Modellierung von Klassen","index":2,"lang":"de","href":"/erste-modellierung/erste-modellierung-von-klassen"},{"name":"üìÉ Der Game Loop","index":3,"lang":"de","href":"/erste-modellierung/der-game-loop"},{"name":"üñä Erste Modellierung des Game Loops","index":4,"lang":"de","href":"/erste-modellierung/erste-modellierung-game-loop"},{"name":"üìÉ Zustandsdiagramme zur Modellierung von Spielobjekten","index":5,"lang":"de","href":"/erste-modellierung/zustandsdiagramme-zur-modellierung-von-spielobjekte"},{"name":"üñä Zustandsdiagramm f√ºr Bugs","index":6,"lang":"de","href":"/erste-modellierung/zustandsdiagramm-fuer-bugs"}],"sections":[],"href":"/erste-modellierung"},{"name":"Erste Implementierung","index":2,"isEmpty":true,"pages":[{"name":"Vorbereitung","index":0,"lang":"de","href":"/erste-implementierung/vorbereitung"},{"name":"Weitere Klassen","lang":"de","index":1,"href":"/erste-implementierung/weitere-klassen"},{"name":"Alles bewegt sich","index":2,"lang":"de","href":"/erste-implementierung/alles-bewegt-sich"},{"name":"Bugs lernt springen","index":3,"lang":"de","href":"/erste-implementierung/bugs-lernt-springen"},{"name":"Bugs tut sich weh","index":4,"lang":"de","href":"/erste-implementierung/bugs-tut-sich-weh"},{"name":"Ein Apfel fiel vom Baum","index":5,"lang":"de","href":"/erste-implementierung/ein-apfel-fiel-vom-baum"},{"name":"Alles kommt wieder","index":6,"lang":"de","href":"/erste-implementierung/alles-kommt-wieder"}],"sections":[],"href":"/erste-implementierung"},{"name":"Euer Spiel","index":2,"isEmpty":true,"pages":[{"name":"Ideen sammeln","index":0,"href":"/euer-spiel/ideen-sammeln"},{"name":"Scrum","index":0,"lang":"de","href":"/euer-spiel/scrum"}],"sections":[{"name":"Hilfen f√ºr Epics","isEmpty":true,"pages":[{"name":"Angriff","hide":true,"href":"/euer-spiel/epics/angriff"},{"name":"Bestenliste","hide":true,"href":"/euer-spiel/epics/highscore"},{"name":"Ebenen","hide":true,"href":"/euer-spiel/epics/ebenen"},{"name":"Gegenst√§nde","hide":true,"href":"/euer-spiel/epics/items"},{"name":"Leben","hide":true,"href":"/euer-spiel/epics/leben"},{"name":"M√ºnzen","hide":true,"href":"/euer-spiel/epics/muenzen"},{"name":"Portal","hide":true,"href":"/euer-spiel/epics/portal"},{"name":"Shop","hide":true,"href":"/euer-spiel/epics/shop"},{"name":"ü•á Ausweichen (Dodge)","lang":"de","href":"/euer-spiel/epics/dodge"},{"name":"ü•à Animierter Hintergrund","lang":"de","href":"/euer-spiel/epics/animierter-hintergrund"},{"name":"ü•à Hintergrundobjekte","lang":"de","href":"/euer-spiel/epics/hintergrund-objekte"},{"name":"ü•à Pause","href":"/euer-spiel/epics/pause"},{"name":"ü•â L√ºcken","href":"/euer-spiel/epics/luecken"},{"name":"ü•â Schneller mit der Zeit","href":"/euer-spiel/epics/schneller-mit-der-zeit"},{"name":"ü•â Sound","href":"/euer-spiel/epics/sound"},{"name":"ü•â Startbildschirm","href":"/euer-spiel/epics/startbildschirm"},{"name":"ü•â Tag und Nacht","href":"/euer-spiel/epics/tag-nacht"}],"sections":[],"href":"/euer-spiel/epics"}],"href":"/euer-spiel"}],"pages":[{"name":"Einf√ºhrung","index":0,"href":"/"},{"name":"üìÉ Die Spielidee","index":1,"href":"/die-spielidee"}]}},"__N_SSG":true}