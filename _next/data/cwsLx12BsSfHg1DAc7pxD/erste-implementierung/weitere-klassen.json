{"pageProps":{"locale":"de","markdown":"\n# Weitere Klassen\n\nUnser Spiel besteht im Moment aus zwei Klassen. Im Laufe dieser Seite wollen wir weitere Klassen implementieren und die folgende Ausgabe erreichen.\n\n![](/assets/weitere-klassen/ausgabe.png)\n\n## Aufgaben\n\n### Klassen implementieren\n\nSetze das folgende :t[UML-Klassendiagramm]{#klassendiagramm} im BlueJ-Projekt um. Die Klassen **Sprite** und **Stage** stammt aus der **Scratch for Java** Bibliothek. Die Klassen **Sprite** und **Stage** haben eine vielzahl von Methoden, die den Bl√∂cken in Scratch √§hneln. Wir werden diese nach und nach kennenlernen. Im Klassendiagramm werden nur im Moment relevante dargestellt, damit es √ºbersichtlich bleibt.\n\n```mermaid\nclassDiagram\n    Stage <|-- BunnyHop\n    Sprite <|-- Spieler\n    Sprite <|-- Feind\n    Sprite <|-- Plattform\n    Feind <|-- StachelFeind\n\n    class Stage {\n        setSize(width: int, height: int)\n        add(sprite: Sprite)\n        remove(sprite: Sprite)\n        setColor(r: int, g: int, b: int)\n        addBackdrop(name: String, filePath: String)\n        switchBackdrop(name: String)\n        nextBackdrop()\n    }\n\n    class BunnyHop {\n        Spieler bugs\n        StachelFeind ingo\n        Plattform p1\n        Plattform p2\n        Plattform p3\n        Plattform p4\n    }\n\n    class Sprite {\n        getX(): float\n        getY(): float\n        setX(x: float)\n        setY(y: float)\n        setPosition(x: float, y: float)\n        changeX(x: float)\n        changeY(y: float)\n        setSize(percentage: float)\n        move(steps: float)\n        setDirection(direction: float)\n        turnLeft(amount: float)\n        turnRight(amount: float)\n        addCostume(name: String, filePath: String)\n        switchCostume(name: String)\n        nextCostume()\n    }\n\n    class Spieler {\n    }\n\n    class Plattform {\n        istKaputt: boolean\n    }\n\n    class Feind {\n    }\n\n    class StachelFeind {\n    }\n```\n\n:::alert{info}\nWenn du dir nicht sicher bist wie man das Klassendiagramm in Java umsetzen kann, dann orientiere dich an der Klasse Spieler oder schaue hier: :t[Verebung in Java]{#vererbung-java}\n:::\n\n### Ausgabe nachstellen\n\nDa wir nun alle notwendigen Klassen zur Verf√ºgung haben, k√∂nnen wir jetzt die Klasse **BunnyHop** so ver√§ndern, dass sie der obigen Ausgabe entspricht.\n\nModifiziere die Klasse **BunnyHop** so, dass sie der obigen Ausgabe entspricht.\n\nSetze dazu die Gr√∂√üe der Stage BunnyHop auf 800x400 (`this.setSize(800, 400)`) und nutze die folgenden Objektdiagramme:\n\n::excalidraw{src=\"/assets/weitere-klassen/object-diagram.excalidraw\" aspectRatio=\"4/3\" autoZoom=true center=true edit=false}\n\n\n\n:::collapsible{title=\"Tipp: Position\" id=\"tipp-1\"}\nMit den Methoden [**setX**](https://scratch4j.openpatch.org/reference/sprite/motion/setX), [**setY**](https://scratch4j.openpatch.org/reference/sprite/motion/setY), [**setPosition**](https://scratch4j.openpatch.org/reference/sprite/motion/setPosition) kannst du die Position von Objekten der Klasse Sprite ver√§ndern.\n:::\n\n:::collapsible{title=\"Tipp: Koordinaten\" id=\"tipp-2\"}\nFalls du Hilfe bzgl. der Koordinaten brauchst, kannst du im Konstruktor der **BunnyHop**-Klasse die Methode `this.setDebug(true)` aufrufen.\n:::\n\n### L√∂sung\n\n::archive[Projekt Weitere Klassen.zip]{name=\"bugs-weitere-klassen\"}\n","data":{"name":"Weitere Klassen","lang":"de","index":1},"toc":{"headings":[{"level":1,"label":"Weitere Klassen","anchor":"weitere-klassen"},{"level":2,"label":"Aufgaben","anchor":"aufgaben"},{"level":3,"label":"Klassen implementieren","anchor":"klassen-implementieren"},{"level":3,"label":"Ausgabe nachstellen","anchor":"ausgabe-nachstellen"},{"level":3,"label":"L√∂sung","anchor":"lsung"}]},"navigation":{"next":{"name":"Alles bewegt sich","index":2,"href":"/erste-implementierung/alles-bewegt-sich"},"current":{"name":"Weitere Klassen","lang":"de","index":1,"href":"/erste-implementierung/weitere-klassen"},"previous":{"name":"Vorbereitung","index":0,"lang":"de","href":"/erste-implementierung/vorbereitung"},"sections":[{"name":"Erste Modellierungen","index":1,"isEmpty":true,"pages":[{"name":"üñä Erste Modellierung von Klassen","index":2,"href":"/erste-modellierung/erste-modellierung-von-klassen"},{"name":"üìÉ Der Game Loop","index":3,"href":"/erste-modellierung/der-game-loop"},{"name":"üñä Erste Modellierung des Game Loops","index":4,"href":"/erste-modellierung/erste-modellierung-game-loop"},{"name":"üìÉ Zustandsdiagramme zur Modellierung von Spielobjekten","index":5,"href":"/erste-modellierung/zustandsdiagramme-zur-modellierung-von-spielobjekte"},{"name":"üñä Zustandsdiagramm f√ºr Bugs","index":6,"href":"/erste-modellierung/zustandsdiagramm-fuer-bugs"}],"sections":[],"href":"/erste-modellierung"},{"name":"Erste Implementierung","index":2,"isEmpty":true,"pages":[{"name":"Vorbereitung","index":0,"lang":"de","href":"/erste-implementierung/vorbereitung"},{"name":"Weitere Klassen","lang":"de","index":1,"href":"/erste-implementierung/weitere-klassen"},{"name":"Alles bewegt sich","index":2,"href":"/erste-implementierung/alles-bewegt-sich"},{"name":"Bugs lernt springen","index":3,"href":"/erste-implementierung/bugs-lernt-springen"},{"name":"Bugs tut sich weh","index":4,"href":"/erste-implementierung/bugs-tut-sich-weh"},{"name":"Ein Apfel fiel vom Baum","index":5,"href":"/erste-implementierung/ein-apfel-fiel-vom-baum"},{"name":"Alles kommt wieder","index":6,"href":"/erste-implementierung/alles-kommt-wieder"}],"sections":[],"href":"/erste-implementierung"}],"pages":[{"name":"Einf√ºhrung","index":0,"href":"/"},{"name":"üìÉ Die Spielidee","index":1,"href":"/die-spielidee"}]}},"__N_SSG":true}